{"version":3,"sources":["components/modal/modal.module.css","components/phonebook.module.css","store/actions/phonebook.js","store/actions/actionsTypes.js","components/modal/FormErrors/FormErrors.js","components/modal/modal.js","components/listcontacts/liscontacts.js","components/phonebook.js","App.js","serviceWorker.js","store/reducers/phonebook.js","store/reducers/rootReducer.js","index.js"],"names":["module","exports","fetchContactsStorage","dispatch","type","addContactHandler","name","phone","contact","addContact","localStorageSet","removeContactLocal","removeContact","FormErrors","formErrors","className","Object","keys","map","fieldName","i","length","key","Modal","props","handleUserInput","e","target","value","setState","validateField","onClose","dublicate","save","contacts","filter","item","toLowerCase","state","nameValid","phoneValid","formValid","bind","fieldValidationErrors","this","match","validateForm","show","classes","modal","modal__input","for","id","onChange","placeholder","modal__actions","disabled","onClick","React","Component","connect","phonebook","listcontacts","phonebook__header","phonebook__list","includes","search","sort","a","b","removeContactHandler","showModal","phonebook__actions","searchHandler","App","Boolean","window","location","hostname","contactStorage","localStorage","getItem","Array","from","JSON","parse","initialState","combineReducers","action","concat","element","setItem","stringify","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.439d3841.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"modal_modal__3j2Z5\",\"modal__actions\":\"modal_modal__actions__3SWHU\",\"modal__input\":\"modal_modal__input__rg5_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonebook\":\"phonebook_phonebook__1Vsm9\",\"phonebook__actions\":\"phonebook_phonebook__actions__l0YAR\",\"phonebook__list\":\"phonebook_phonebook__list__3lMgC\",\"phonebook__header\":\"phonebook_phonebook__header__33YRT\"};","import {ADD_CONTACT, LOCALSTORAGE_SET, LOCALSTORAGE_GET, REMOVE_CONTACT, SEARCH_INPUT} from './actionsTypes'\r\n\r\nexport function fetchContactsStorage() {\r\n    return dispatch => {\r\n        dispatch(localStorageGet())\r\n    }\r\n}\r\n\r\nexport function addContactHandler(name, phone) {\r\n    return dispatch => {\r\n        const contact = {\r\n            name,\r\n            phone\r\n        }\r\n        dispatch(addContact(contact))\r\n        dispatch(localStorageSet())\r\n    }\r\n}\r\n\r\nexport function removeContactLocal(contact) {\r\n    return dispatch => {\r\n        dispatch(removeContact(contact))\r\n        dispatch(localStorageSet())\r\n    }\r\n}\r\n\r\nexport function removeContact(contact) {\r\n\r\n    return {\r\n        type: REMOVE_CONTACT,\r\n        contact\r\n    }\r\n}\r\n\r\nexport function addContact(contact) {\r\n    return {\r\n        type: ADD_CONTACT,\r\n        contact\r\n    }\r\n}\r\n\r\nexport function searchHandler(search) {\r\n    return {\r\n        type: SEARCH_INPUT,\r\n        search\r\n    }\r\n}\r\n\r\nfunction localStorageSet() {\r\n    return {\r\n        type: LOCALSTORAGE_SET\r\n    }\r\n}\r\n\r\nfunction localStorageGet() {\r\n    return {\r\n        type: LOCALSTORAGE_GET\r\n    }\r\n}\r\n\r\n","export const ADD_CONTACT = \"ADD_CONTACT\"\r\nexport const REMOVE_CONTACT = \"REMOVE_CONTACT\"\r\nexport const LOCALSTORAGE_GET = \"LOCALSTORAGE_GET\"\r\nexport const LOCALSTORAGE_SET = \"LOCALSTORAGE_SET\"\r\nexport const SEARCH_INPUT = \"SEARCH_INPUT\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst FormErrors = ({formErrors}) =>\r\n  <div className='formErrors'>\r\n    {Object.keys(formErrors).map((fieldName, i) => {\r\n      if(formErrors[fieldName].length > 0){\r\n        return (\r\n          <p key={i}>{fieldName} {formErrors[fieldName]}</p>\r\n        )        \r\n      } else {\r\n        return '';\r\n      }\r\n    })}\r\n  </div>\r\n\r\nexport default FormErrors","import React from \"react\";\r\nimport classes from \"./modal.module.css\";\r\nimport { connect } from 'react-redux';\r\nimport { addContactHandler } from '../../store/actions/phonebook' \r\nimport FormErrors from './FormErrors/FormErrors'\r\n\r\nclass Modal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            phone: '',\r\n            dublicate: false,\r\n            formErrors: {name: '', phone: ''},\r\n            nameValid: false,\r\n            phoneValid: false,\r\n            formValid: false\r\n        };\r\n    \r\n        this.handleUserInput = this.handleUserInput.bind(this);\r\n\r\n\r\n      }\r\n\r\n    handleUserInput = (e) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        this.setState({[name]: value}, \r\n            () => { this.validateField(name, value) })\r\n      }\r\n\r\n    validateField(fieldName, value) {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let nameValid = this.state.nameValid;\r\n        let phoneValid = this.state.phoneValid;\r\n        switch(fieldName) {\r\n            case 'name':\r\n                nameValid = value.match(/[a-zA-Zа-яёА-ЯЁ]/g);\r\n                fieldValidationErrors.name = nameValid ? '' : ' Не корретное имя (Вводите только кириллицу и латинницу )';\r\n                break;\r\n            case 'phone':\r\n                // eslint-disable-next-line\r\n                phoneValid = value.match(/^[+|0-9]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$/g)\r\n                fieldValidationErrors.phone = phoneValid ? '': ' Не корректный номер';\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n            this.setState({formErrors: fieldValidationErrors,\r\n                            nameValid: nameValid,\r\n                            phoneValid: phoneValid\r\n                        }, this.validateForm);\r\n    }\r\n    validateForm() {\r\n        this.setState({formValid: this.state.nameValid &&\r\n                                  this.state.phoneValid});\r\n    }    \r\n\r\n    onClose = e => {\r\n        this.props.onClose && this.props.onClose(e);\r\n    }\r\n\r\n    dublicate = () => {\r\n        return (\r\n            <h1>КОНТАКТ УЖЕ ЕСТЬ</h1>\r\n        )\r\n    }\r\n\r\n    save = () => {\r\n        if (this.props.contacts.filter(item => { \r\n          return  item.name.toLowerCase() === this.state.name.toLowerCase() \r\n          || item.phone.toLowerCase() === this.state.phone.toLowerCase()\r\n        }).length > 0)\r\n        {   \r\n            this.setState({dublicate: true});\r\n        } else {\r\n            this.onClose()\r\n            this.props.addContactHandler(this.state.name,this.state.phone)\r\n            this.setState({\r\n                name: '',\r\n                phone: '',\r\n                dublicate: false\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        if (!this.props.show) {\r\n        return null;\r\n        }\r\n        return (\r\n        <div className={classes.modal}>\r\n            <h2>Введите имя и номер контакта</h2>\r\n            <div>{ this.state.dublicate \r\n                ? <h1>ЭТО КОНТАКТ УЖЕ ЕСТЬ</h1>\r\n                : null }</div>\r\n            <div className={classes.modal__input}>\r\n                <label for=\"name\">Имя</label>\r\n                <input type=\"text\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.handleUserInput} placeholder=\"Введите имя\" />\r\n                <label for=\"phone\">Номер</label>\r\n                <input type=\"text\" id=\"phone\" name=\"phone\" value={this.state.phone} onChange={this.handleUserInput} placeholder=\"Введите номер\"/>\r\n            </div>\r\n            \r\n            <div >\r\n                <FormErrors formErrors={this.state.formErrors} />\r\n            </div>\r\n\r\n            <div className={classes.modal__actions}>\r\n                <button disabled={!this.state.formValid} onClick={this.save}>\r\n                    Добавить\r\n                </button>\r\n                <button  onClick={this.onClose}>\r\n                    Закрыть\r\n                </button>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        contacts: state.phonebook.contacts\r\n    }\r\n}\r\n\r\nfunction mapDispathToProps(dispatch) {\r\n    return {\r\n        addContactHandler: (name, phone) => dispatch(addContactHandler(name, phone))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispathToProps)(Modal)\r\n\r\n","import React from 'react'\r\nimport classes from '../phonebook.module.css'\r\nimport {removeContactLocal} from '../../store/actions/phonebook'\r\nimport { connect } from 'react-redux';\r\n\r\nclass listcontacts extends React.Component {\r\n\r\n    removeContactHandler(contact) {\r\n        this.props.removeContactLocal(contact)\r\n    }\r\n\r\n    render() {\r\n\r\n    return (\r\n        <> \r\n            <div className={classes.phonebook}>\r\n                    <div className={classes.phonebook__header}>\r\n                        <div>\r\n                            Имя\r\n                        </div> \r\n                        <div> \r\n                            Номер\r\n                        </div>\r\n                        <div> \r\n                            Действие\r\n                        </div>\r\n                    </div>\r\n                    <ul className={classes.phonebook__list}>\r\n\r\n                        {this.props.contacts\r\n                        .filter(contact => { \r\n                          return contact.name.toLowerCase().includes(this.props.search.toLowerCase())\r\n                        })\r\n                        .sort(function (a, b) {\r\n                            if (a.name.toLowerCase() > b.name.toLowerCase()) {\r\n                              return 1;\r\n                            }\r\n                            if (a.name.toLowerCase() < b.name.toLowerCase()) {\r\n                              return -1;\r\n                            }\r\n                            return 0\r\n                        })\r\n                        .map(contact => {\r\n                            return (\r\n                                <li \r\n                                key ={contact.id}\r\n                                className={classes.phonebook__header}\r\n                                >   \r\n                                    <div>{contact.name}</div>\r\n                                    <div>{contact.phone}</div>\r\n                                    <div><button onClick={this.removeContactHandler.bind(this, contact)}>Удалить</button></div>\r\n                                    \r\n                                </li>\r\n                            )\r\n                        })}\r\n\r\n                    \r\n                        \r\n                    </ul>\r\n                </div>\r\n        </>\r\n    )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        contacts: state.phonebook.contacts,\r\n        search: state.phonebook.search\r\n    }\r\n}\r\n\r\nfunction mapDispathToProps(dispatch) {\r\n    return {\r\n        removeContactLocal: contact => dispatch(removeContactLocal(contact))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispathToProps)(listcontacts)","import React from 'react'\r\nimport classes from './phonebook.module.css'\r\nimport { connect } from 'react-redux';\r\nimport Modal from './modal/modal'\r\nimport ListContacts from './listcontacts/liscontacts'\r\nimport { fetchContactsStorage, searchHandler } from '../store/actions/phonebook'\r\n\r\nclass phonebook extends React.Component {\r\n\r\n    state = { show: false };\r\n\r\n    showModal = e => {\r\n        this.setState({ show: !this.state.show });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.fetchContactsStorage()\r\n    }\r\n    \r\n    render() {\r\n\r\n        const dataSearch = e => {\r\n            const value = e.target.value.toLowerCase();\r\n                this.props.searchHandler(value)\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <h1>Phonebook</h1>\r\n                <div className={classes.phonebook__actions}>\r\n                    <label>Поиск:</label>\r\n                    <input \r\n                        value = {this.props.search}\r\n                        placeholder=\"Введите имя\" \r\n                        onChange={dataSearch}\r\n                        />\r\n                    <button onClick={e => {\r\n                        this.showModal(e)\r\n                    }}>Добавить контакт</button>\r\n                </div>\r\n                <ListContacts />\r\n                <Modal onClose={this.showModal} show={this.state.show} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        contacts: state.phonebook.contacts,\r\n        search: state.phonebook.search\r\n    }\r\n}\r\n\r\nfunction mapDispathToProps(dispatch) {\r\n    return {\r\n        fetchContactsStorage: () => dispatch(fetchContactsStorage()),\r\n        searchHandler: search => dispatch(searchHandler(search))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispathToProps)(phonebook)","import React from 'react';\nimport './App.css';\nimport Phonebook from './components/phonebook';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Naumen test task</h1>\n      <Phonebook />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ADD_CONTACT, REMOVE_CONTACT, LOCALSTORAGE_GET, LOCALSTORAGE_SET, SEARCH_INPUT} from '../actions/actionsTypes'\r\n\r\nlet contactStorage\r\n\r\nif (window.localStorage.getItem('contactsStorage') !== null) {\r\n    contactStorage = Array.from(JSON.parse(window.localStorage.getItem('contactsStorage')))\r\n} else {\r\n    contactStorage = []\r\n}\r\n\r\nconst initialState = {\r\n    contacts: [],\r\n    search: ''\r\n}\r\n\r\nexport default function cityReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case ADD_CONTACT:\r\n            action.contact.id = state.contacts.length\r\n            return {\r\n                ...state, contacts:  state.contacts.concat(action.contact)\r\n            }\r\n        case REMOVE_CONTACT:\r\n            return {\r\n                ...state, contacts:  state.contacts.filter(element => element.id !== action.contact.id)\r\n            }\r\n        case LOCALSTORAGE_GET:\r\n            return {\r\n                ...state, contacts: contactStorage\r\n            }\r\n        case LOCALSTORAGE_SET:\r\n            window.localStorage.setItem('contactsStorage', JSON.stringify(state.contacts))\r\n            return {\r\n                ...state\r\n            }\r\n        case SEARCH_INPUT:\r\n            return {\r\n                ...state, search: action.search\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport phonebookReducer from './phonebook'\r\n\r\nexport default combineReducers({\r\n    phonebook: phonebookReducer,\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, compose, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './store/reducers/rootReducer.js'\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n)\n\n\nconst app = (\n  <Provider store={store}>\n      <App />\n  </Provider>\n)\n\nReactDOM.render(\n    app,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}